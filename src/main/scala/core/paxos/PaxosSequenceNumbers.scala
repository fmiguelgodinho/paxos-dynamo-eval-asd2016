package core.paxos


object PaxosSequenceNumbers {
  // sequence numbers associated to a system nanotime
  // this allows them to be unique and disjoint from other numbers generated by other proposers
  class ProposalSequenceNumber {
    
      private var _number : Int  = 0
      private var _clock  : Long = 0
      
      def generate = (n : Int) => {
        _number = n
        _clock = System.nanoTime
        this
      }
      
      def set = (seq : ProposalSequenceNumber) => {
         _number = seq.number
         _clock = seq.clock
      }
      
      
      def number = _number
      def clock = _clock
  }
  
  // extension to lists of type (ProposalSequenceNumber, String)
  // this is just a simplification make code clearer on the actual algorithm
  // highestProposal searches for the highest numbered proposal in the list
  class ProposalList[T](self: List[(ProposalSequenceNumber, Set[String])]) {
    def highestTag = 
      self.reduce( (x:Any, y:Any) => {
            
            val x_t = x.asInstanceOf[(ProposalSequenceNumber, Set[String])]
            val y_t = y.asInstanceOf[(ProposalSequenceNumber, Set[String])]
            
            if (x_t._1.number > y_t._1.number || 
                (x_t._1.number == y_t._1.number && x_t._1.clock > y_t._1.clock)) 
              x_t else y_t
      })
  }
  
  implicit def enhanceList[T](self: List[(ProposalSequenceNumber, Set[String])]) = new ProposalList(self)
}
